name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'manifest.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      has_changed: ${{ steps.version-check.outputs.has_changed }}
      last_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version from manifest
        id: get-version
        run: |
          VERSION=$(jq -r .version manifest.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: version-check
        run: |
          MANIFEST_VERSION=$(jq -r .version manifest.json)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          if [ "$LATEST_TAG" = "none" ] || [ "v$MANIFEST_VERSION" != "$LATEST_TAG" ]; then
            echo "has_changed=true" >> $GITHUB_OUTPUT
          else
            echo "has_changed=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.has_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ needs.check-version.outputs.last_tag }}"
          if [ "$LATEST_TAG" = "none" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges $LATEST_TAG..HEAD)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create zip file
        run: |
          zip -r auto-mcgraw.zip . -x "*.git*" -x "*.github*" -x "*.zip"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            Changes in this release:
            
            ${{ steps.changelog.outputs.CHANGELOG }}
          files: auto-mcgraw.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}